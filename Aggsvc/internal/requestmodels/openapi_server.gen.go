//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package requestmodels

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Book defines model for Book.
type Book struct {
	Bookdescription string `json:"bookdescription"`
	Bookid          int64  `json:"bookid"`
	Bookname        string `json:"bookname"`
}

// BookCollection defines model for BookCollection.
type BookCollection struct {
	Items *[]Book `json:"items,omitempty"`
}

// CreateBookRequest defines model for CreateBookRequest.
type CreateBookRequest struct {
	// BookDescription Short description of the book
	BookDescription string `json:"book_description"`

	// BookName Title of the book
	BookName string `json:"book_name"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Error *string `json:"error,omitempty"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	Error *string `json:"error,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	Error *string `json:"error,omitempty"`
}

// SearchBooksParams defines parameters for SearchBooks.
type SearchBooksParams struct {
	// Name Name (or partial name) to search for
	Name string `form:"name" json:"name"`
}

// CreateBookJSONRequestBody defines body for CreateBook for application/json ContentType.
type CreateBookJSONRequestBody = CreateBookRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a book
	// (POST /books)
	CreateBook(w http.ResponseWriter, r *http.Request)
	// Search books by name
	// (GET /books/search)
	SearchBooks(w http.ResponseWriter, r *http.Request, params SearchBooksParams)
	// Remove a book
	// (DELETE /books/{id})
	RemoveBook(w http.ResponseWriter, r *http.Request, id int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateBook operation middleware
func (siw *ServerInterfaceWrapper) CreateBook(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBook(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchBooks operation middleware
func (siw *ServerInterfaceWrapper) SearchBooks(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchBooksParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchBooks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RemoveBook operation middleware
func (siw *ServerInterfaceWrapper) RemoveBook(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RemoveBook(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/books", wrapper.CreateBook)
	m.HandleFunc("GET "+options.BaseURL+"/books/search", wrapper.SearchBooks)
	m.HandleFunc("DELETE "+options.BaseURL+"/books/{id}", wrapper.RemoveBook)

	return m
}

type BadRequestJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type ForbiddenResponse struct {
}

type InternalServerErrorJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type NoContentResponse struct {
}

type NotFoundJSONResponse struct {
	Error *string `json:"error,omitempty"`
}

type CreateBookRequestObject struct {
	Body *CreateBookJSONRequestBody
}

type CreateBookResponseObject interface {
	VisitCreateBookResponse(w http.ResponseWriter) error
}

type CreateBook201JSONResponse Book

func (response CreateBook201JSONResponse) VisitCreateBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateBook400JSONResponse struct{ BadRequestJSONResponse }

func (response CreateBook400JSONResponse) VisitCreateBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateBook403Response = ForbiddenResponse

func (response CreateBook403Response) VisitCreateBookResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type CreateBook500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response CreateBook500JSONResponse) VisitCreateBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SearchBooksRequestObject struct {
	Params SearchBooksParams
}

type SearchBooksResponseObject interface {
	VisitSearchBooksResponse(w http.ResponseWriter) error
}

type SearchBooks200JSONResponse BookCollection

func (response SearchBooks200JSONResponse) VisitSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchBooks400JSONResponse struct{ BadRequestJSONResponse }

func (response SearchBooks400JSONResponse) VisitSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchBooks403Response = ForbiddenResponse

func (response SearchBooks403Response) VisitSearchBooksResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type SearchBooks500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response SearchBooks500JSONResponse) VisitSearchBooksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RemoveBookRequestObject struct {
	Id int64 `json:"id"`
}

type RemoveBookResponseObject interface {
	VisitRemoveBookResponse(w http.ResponseWriter) error
}

type RemoveBook204Response = NoContentResponse

func (response RemoveBook204Response) VisitRemoveBookResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RemoveBook400JSONResponse struct{ BadRequestJSONResponse }

func (response RemoveBook400JSONResponse) VisitRemoveBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RemoveBook403Response = ForbiddenResponse

func (response RemoveBook403Response) VisitRemoveBookResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type RemoveBook404JSONResponse struct{ NotFoundJSONResponse }

func (response RemoveBook404JSONResponse) VisitRemoveBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RemoveBook500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response RemoveBook500JSONResponse) VisitRemoveBookResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a book
	// (POST /books)
	CreateBook(ctx context.Context, request CreateBookRequestObject) (CreateBookResponseObject, error)
	// Search books by name
	// (GET /books/search)
	SearchBooks(ctx context.Context, request SearchBooksRequestObject) (SearchBooksResponseObject, error)
	// Remove a book
	// (DELETE /books/{id})
	RemoveBook(ctx context.Context, request RemoveBookRequestObject) (RemoveBookResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreateBook operation middleware
func (sh *strictHandler) CreateBook(w http.ResponseWriter, r *http.Request) {
	var request CreateBookRequestObject

	var body CreateBookJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateBook(ctx, request.(CreateBookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateBook")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateBookResponseObject); ok {
		if err := validResponse.VisitCreateBookResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchBooks operation middleware
func (sh *strictHandler) SearchBooks(w http.ResponseWriter, r *http.Request, params SearchBooksParams) {
	var request SearchBooksRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchBooks(ctx, request.(SearchBooksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchBooks")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchBooksResponseObject); ok {
		if err := validResponse.VisitSearchBooksResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// RemoveBook operation middleware
func (sh *strictHandler) RemoveBook(w http.ResponseWriter, r *http.Request, id int64) {
	var request RemoveBookRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.RemoveBook(ctx, request.(RemoveBookRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RemoveBook")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(RemoveBookResponseObject); ok {
		if err := validResponse.VisitRemoveBookResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW32/bNhD+V4jbHjaAsJwm24PekmwtDAxFkfStCAJGOttsJR57pIIZgf734Ug7lion",
	"6TJjQN8okvfz+/idHqCi1pNDFwOUD8AYPLmA6ePC1Ff4tcMQ5asiF9GlpfG+sZWJllzxOZCTvVCtsTWy",
	"8kweOdrsBJmJ0+Jv0/oGoQTr7k1ja8Vb5xrixstBiGzdCvr+cYfuPmMVoZetGkPF1ktUKGGxdWKd7yL0",
	"Gt4S39m6xpTN+O7+qNewcBHZmeYa+R75z116xywvB1AhRVD5yiuLPOSq1/CeLvf5jm3ek9rVki7Gt9S5",
	"+rgl3hF9UY6iWibfr6rtCgN1XOHAj1zKWWT+EX2ZpiOxR56GiZ07ZV1kqrtKDlUk9Y5m0wR1cmPrkfXJ",
	"m1MNS+LWxAzj72d7S0F1hbwzdabFceiPa1TvSH1gWrFpW+tW6i/jVp1Z4cEGCfstYw3lp10yA9d6UufN",
	"pKc6deiSmgarXSvGvbIR2/HiZ8YllPBTsX/3xbblRer3HjrDbDaHsNRwyWgiyv2BQExhuv0GpzEBrtfE",
	"UQ32FC1VXKMSU9CvRvV2h8043EcbG3wyxH9F73aA2u3zsIm5dUs60BEr2ajzDwspsUpN1oqxpXvUyrha",
	"BTRcrVP6ITVAioIyEUGJotkq2YOGe+SQ3Z7M5rO5dIc8OuMtlHA6m89OQYM3cZ3gKpLLBCNlOAXMJBCL",
	"GsoB4pCLxxAvqN78K115jnxTSvXjPkfuMG0MJtSb+cnREsjsn+pUam3GopYmns3nT7l6zK0YjM5kcvqy",
	"yWhI/fY9QQ5NsiShXdsa3jyipkzmu5xlnIvMIwmxwgNoX6fji0QJIQmbFiNygPLTZNyYFtUvxMobjtY0",
	"Sh7Cr8LfLVeXafhZufu1Q96AhvxAYftkxhDrAVzfPrubCfzzo8I/kNIDRDhX1eO56EjqpGpNrNYiFyIr",
	"ucAfjCTXA01Rd5sE4JArD7bus1Y1GHFKlqukT1tpeJYriz+G+iscydq244eo0Z4eaSA+TY4XB/UBupy9",
	"3K/9n9X/BePZ96W1/Y87Hu4Zt704yGG6nKHruIES1jH6UBaF8Xa2nZazilrob/p/AgAA//+WIdViPAwA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
