//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Conflict defines model for Conflict.
type Conflict struct {
	Message *string `json:"message,omitempty"`
}

// LoginSuccessful defines model for LoginSuccessful.
type LoginSuccessful struct {
	Message *string `json:"message,omitempty"`
	Token   *string `json:"token,omitempty"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	Message *string `json:"message,omitempty"`
}

// UserCreated defines model for UserCreated.
type UserCreated struct {
	Message *string `json:"message,omitempty"`
	UserId  *string `json:"userId,omitempty"`
}

// ValidToken defines model for ValidToken.
type ValidToken struct {
	Emailid  *openapi_types.Email `json:"emailid,omitempty"`
	Isadmin  *bool                `json:"isadmin,omitempty"`
	Userid   *int                 `json:"userid,omitempty"`
	Username *string              `json:"username,omitempty"`
}

// DecodeUserTokenJSONBody defines parameters for DecodeUserToken.
type DecodeUserTokenJSONBody struct {
	Token string `json:"token"`
}

// LoginUserJSONBody defines parameters for LoginUser.
type LoginUserJSONBody struct {
	Password string `json:"password" validate:"required"`
	Username string `json:"username" validate:"required"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody struct {
	Age      int                 `json:"age" validate:"required,min=18,lte=99"`
	Email    openapi_types.Email `json:"email" validate:"required,email"`
	Password string              `json:"password" validate:"required"`
	Username string              `json:"username" validate:"required"`
}

// DecodeUserTokenJSONRequestBody defines body for DecodeUserToken for application/json ContentType.
type DecodeUserTokenJSONRequestBody DecodeUserTokenJSONBody

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody LoginUserJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Validate and decode JWT token
	// (POST /decode-usertoken)
	DecodeUserToken(w http.ResponseWriter, r *http.Request)
	// Log in a user
	// (POST /login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Create a new user
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DecodeUserToken operation middleware
func (siw *ServerInterfaceWrapper) DecodeUserToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DecodeUserToken(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/decode-usertoken", wrapper.DecodeUserToken)
	m.HandleFunc("POST "+options.BaseURL+"/login", wrapper.LoginUser)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.CreateUser)

	return m
}

type ConflictJSONResponse struct {
	Message *string `json:"message,omitempty"`
}

type InvalidTokenResponse struct {
}

type LoginSuccessfulJSONResponse struct {
	Message *string `json:"message,omitempty"`
	Token   *string `json:"token,omitempty"`
}

type UnauthorizedJSONResponse struct {
	Message *string `json:"message,omitempty"`
}

type UserCreatedJSONResponse struct {
	Message *string `json:"message,omitempty"`
	UserId  *string `json:"userId,omitempty"`
}

type ValidTokenJSONResponse struct {
	Emailid  *openapi_types.Email `json:"emailid,omitempty"`
	Isadmin  *bool                `json:"isadmin,omitempty"`
	Userid   *int                 `json:"userid,omitempty"`
	Username *string              `json:"username,omitempty"`
}

type DecodeUserTokenRequestObject struct {
	Body *DecodeUserTokenJSONRequestBody
}

type DecodeUserTokenResponseObject interface {
	VisitDecodeUserTokenResponse(w http.ResponseWriter) error
}

type DecodeUserToken200JSONResponse struct{ ValidTokenJSONResponse }

func (response DecodeUserToken200JSONResponse) VisitDecodeUserTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DecodeUserToken403Response = InvalidTokenResponse

func (response DecodeUserToken403Response) VisitDecodeUserTokenResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type LoginUserRequestObject struct {
	Body *LoginUserJSONRequestBody
}

type LoginUserResponseObject interface {
	VisitLoginUserResponse(w http.ResponseWriter) error
}

type LoginUser200JSONResponse struct{ LoginSuccessfulJSONResponse }

func (response LoginUser200JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type LoginUser401JSONResponse struct{ UnauthorizedJSONResponse }

func (response LoginUser401JSONResponse) VisitLoginUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse struct{ UserCreatedJSONResponse }

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser409JSONResponse struct{ ConflictJSONResponse }

func (response CreateUser409JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Validate and decode JWT token
	// (POST /decode-usertoken)
	DecodeUserToken(ctx context.Context, request DecodeUserTokenRequestObject) (DecodeUserTokenResponseObject, error)
	// Log in a user
	// (POST /login)
	LoginUser(ctx context.Context, request LoginUserRequestObject) (LoginUserResponseObject, error)
	// Create a new user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// DecodeUserToken operation middleware
func (sh *strictHandler) DecodeUserToken(w http.ResponseWriter, r *http.Request) {
	var request DecodeUserTokenRequestObject

	var body DecodeUserTokenJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DecodeUserToken(ctx, request.(DecodeUserTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DecodeUserToken")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DecodeUserTokenResponseObject); ok {
		if err := validResponse.VisitDecodeUserTokenResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// LoginUser operation middleware
func (sh *strictHandler) LoginUser(w http.ResponseWriter, r *http.Request) {
	var request LoginUserRequestObject

	var body LoginUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.LoginUser(ctx, request.(LoginUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "LoginUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(LoginUserResponseObject); ok {
		if err := validResponse.VisitLoginUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RX348aNxD+Vyy3j2aBI6l6SJGSclK1KG1PTS6tVFWVzzssvux6XNt7gUT7v1fjhYXl",
	"h6CUPuXpfMN45ht/38zAF66wtGjABM/HX7gDb9F4iP9M0MwKrQKdFZoAJh6ltYVWMmg0/SePhmxezaGU",
	"dLIOLbigmxAleC9zoCMsZGkL4GP+4MEZWQJDx6CUumCycCCzJYOF9sFzwcPSkqcPTpuc13VrwccnUIHX",
	"ZMrAK6ctAeHjFi3rsZMJasFT8ywLnb3Hj2DOxB19mfZMN3eTc4AK/hZzbd5VSoH3s6q49mvG8Mxv4u+B",
	"Ejysq9xcg+V0/vij0r/oafrwOR3+rFOfml9fqkn6XfrR/v5hMr1NkuQyLvYw1YI/GFmFOTr9GbJrv8GK",
	"TFZtEW+l95/QZZdV0EFL6D24iQMZrg+eQjPVxN56s2J5iEmqMM26AYY3oxcvLyzzaO5a8A+dBrmw5Nh/",
	"egfxFOfmrzuE1zl9migsueAzdKUMJE0yHipee5mVuivk4CpoXR8RC5Bm/VA7aYc3o9ZTmwA5uLUniWYf",
	"4h3C8GZ02cvegcIMGkmypv+ilzYzpExd7zf3KZuhY6U0Mtcmj9e8YNqoosrIEEmigzQZKzCPXto0jrFN",
	"ddjI6SeKAyWYwN7cp1zwZ3C+STVMBsmA6kYLRlrNx3wUTYJbGeaRtH4W0fcoeDs7LPrIPrEbuScdruqk",
	"pI1SBHfwdwU+/IDZ8j/o5qyRdWxAEQTtqFX/WAX68yBlGz+SUTRs7b+bwYD+fOtgxsf8m/5mVfZbv/5W",
	"k9SCvxiMTl/prB6C4auylG7Jx03LyQCR5YYENv3tfSsgwfsFzdbjfMTRS3RcjYl2kHbI8KAqB/erzw61",
	"ieCLHkqre1RFDqYHi+BkL8g8hn1elcrHGxrqo+34RBMjQ7hOlh2JtCnFptj/TTC7Xweiaoan73U3Ukc1",
	"bzGOAhmHQaOSOBaOq6RZZVeVye5eGw32hu2/50qU2rwafi+KAK9ub2NpzXbYE0eSIbxemc5bKBegaQIR",
	"iq+zKUT7lMT2ZS1yjtS3vmzF9rg9faf9sdJtjSYMk8zAp3V7kAMRpcPyHYk5IqvrfwIAAP//v10hKwwN",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
